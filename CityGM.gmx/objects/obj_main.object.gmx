<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// GAME MAKER SETUP --------------------------
draw_set_font(ft_normal);
var randomSeed = DLL_getRandomRange(1,100);
random_set_seed(randomSeed);


// DLL SETUP ---------------------------------
DLL_initDLL();
DLL_initMap();

// Map Generation ----------------------------
// Trees:
var treeSeeds = irandom_range(4, 12);
DLL_seedMap(TT_TREE, treeSeeds);
var treeDensity = irandom_range(5, 24) + (24 - treeSeeds*2);
DLL_growSeeds(TT_TREE, treeDensity);

// little ponds:
var waterSeeds = irandom_range(1, 3);
DLL_seedMap(TT_WATER, waterSeeds);
var waterDensity = (30 - waterSeeds*8) + 10;
DLL_growSeeds(TT_WATER, waterDensity);

// Map Information ---------------------------
// TILES:
tileString = DLL_tileTypeToString();
tileStringSize = string_length(tileString);

// BUILDINGS:
buildingString = DLL_buildingsToString();
buildingElements = DLL_getBuildingVectorSize();
xArray[MAX_BUILDINGS] = 0;
yArray[MAX_BUILDINGS] = 0;
typeArray[MAX_BUILDINGS] = 0;
powerArray[MAX_BUILDINGS] = 0;
pLineValueArray[MAX_BUILDINGS] = 0;

// ROADS:
roadString = DLL_roadsToString();
roadElements = DLL_getRoadsVectorSize();
roadXArray[MAX_BUILDINGS] = 0;
roadYArray[MAX_BUILDINGS] = 0;
roadTypeArray[MAX_BUILDINGS] = 0;


// ZONES:
updateZone = Z_RES; // changes every tick of alarm0
surfaceZones = noone // init surface

RzonesX[MAX_ZONES] = 0;
RzonesY[MAX_ZONES] = 0;
RzonesZT[MAX_ZONES] = 0;
RzonesL[MAX_ZONES] = 0;
RzonesTV[MAX_ZONES] = 0;
RzonesSP[MAX_ZONES] = 0;
RzonesNum = 0;

CzonesX[MAX_ZONES] = 0;
CzonesY[MAX_ZONES] = 0;
CzonesZT[MAX_ZONES] = 0;
CzonesL[MAX_ZONES] = 0;
CzonesTV[MAX_ZONES] = 0;
CzonesSP[MAX_ZONES] = 0;
CzonesNum = 0;

IzonesX[MAX_ZONES] = 0;
IzonesY[MAX_ZONES] = 0;
IzonesZT[MAX_ZONES] = 0;
IzonesL[MAX_ZONES] = 0;
IzonesTV[MAX_ZONES] = 0;
IzonesSP[MAX_ZONES] = 0;
IzonesNum = 0;

// MINIMAP:
surfaceMiniMap = noone; // init surface
updateSurfaces = true; // draw first time
toggleMiniMap = false;

// Pollution map:
surfaceSpecialMap = noone; // init surface

// Menu and Info:
toggleDrawMenus = true;

// Time and Seasons ---------------
gameYear = DLL_getGameYear();
gameMonth = DLL_getGameMonth();
gameSeason = DLL_getGameSeason();
gameTimeString = scr_setTimeString(gameSeason, gameYear);
gameSpeed = SP_NORMAL;
gameSpeedMultiplier = TIME_MUL_NORMAL;
alarm[0] = TIME_MONTH;
timeAlarmStorage = alarm_get(0);
drawPause = false;

// season change:
drawCurtain = false;
currentCurtainAlpha = 0;
targetCurtainAlpha = 0;

// money
money = DLL_getGameMoney();
moneyWithCommas = "";
moneyPlaceholders = "";
scr_updateMoneyString(id);

global.curtainClosed = false;

// population and city type
gamePopulation = DLL_getPopulation();
gameCityType = DLL_getCityType();
popWithCommas = "";
popPlaceholders = "";
scr_updatePopString(id);


// Modes ---------------
gameMode = DLL_getGameMode();

// Build Mode:
selectedBuilding = BT_TREE; // just a default value...
selectedBuildingString = scr_setBuildingMenuString(selectedBuilding);
pressHoldMode = false;


// Game Menu ------------------
selectedMenu = MENU_TAX;   // default value


// Selected Map ---------------
selectedMap = MENU_MAP_OVERVIEW; // highlighted selection in map menu
curSpecialMap = MENU_MAP_OVERVIEW;
mapUnlocked[5] = false;
mapUnlocked[4] = false;
mapUnlocked[MENU_MAP_LANDVALUE] = true;
mapUnlocked[MENU_MAP_POLLUTION] = true;
mapUnlocked[MENU_MAP_OVERVIEW] = true;


// Other: ---------------------
// camera:
camera = instance_create(view_wview/2,view_hview/2, obj_camera);
zoomOut = false;

// puts instance count in window boarder:
debugger = instance_create(x,y, obj_debugger);

image_speed = 0;
canDraw = true;

// electricity:
displayPowerSign = 0;
alarm[4] = TIME_ELECTRICSIGN;
alarm[5] = TIME_SENDELECTRICITY;

// Tax Season:
resRate = DLL_getTaxRate(TAX_RES);
comRate = DLL_getTaxRate(TAX_COM);
indRate = DLL_getTaxRate(TAX_IND);
curTaxItem = TAX_ITEM_RES;
taxSelectTimer = 0;
taxSelectPushTimer = 0;
taxSelectBoostRate = 0;

// Game End Question:
gameEndMessage = false;
quit_m1 = "Quit game without saving?";
quit_m2 = "'esc' to cancel";
quit_m3 = "'q' to quit!";


// Messages:
messageQueue = instance_create(x, y, obj_messageQueue);
drawMessageScreen = false;

// TIPS:
tips = ds_list_create();
scr_initTips(id);
funnies = ds_list_create();
scr_initFunnies(id);
alarmIncreaser = 0;
alarm[6] = MESSAGE_BASE_ALARM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RANDOM TIPS/FUNNIES

alarmIncreaser += 5;
randomIncreaser = irandom_range(-60*6, 60*8);

var roll = choose(0, 1, 1, 1, 2, 2);
// TIPS
if (roll == 1) {
    var tipSize = ds_list_size(tips);
    var msgNum = irandom_range(0, tipSize - 1);
    var message = tips[| msgNum];
    scr_pushMessage(messageQueue, message, MC_TIP, 0);
}

// FUNNIES
else if (roll == 2){
    var tipSize = ds_list_size(funnies);
    var msgNum = irandom_range(0, tipSize - 1);
    var message = funnies[| msgNum];
    scr_pushMessage(messageQueue, message, MC_FUNNY, 0);
}


alarm[6] = MESSAGE_BASE_ALARM + alarmIncreaser + randomIncreaser;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
DLL_sendElectricity();


alarm[5] = TIME_SENDELECTRICITY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// display electricity graphic animation

scr_flipElectricitySignImageIndex(id);

alarm[4] = TIME_ELECTRICSIGN;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CURTAIN OUT EFFECT FOR SEASON






drawCurtain = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CURTAIN IN EFFECT FOR SEASON

targetCurtainAlpha = 0;

// NOW update the season to draw the correct sprites:
gameSeason = DLL_getGameSeason();


// Check for tax season!
if ((gameSeason == S_SPRING) &amp;&amp; (gameMode != MD_TAX)) {
    camera.camera_toggle = MD_TAX; // this must come first
    scr_changeToTaxMode(id);
}


alarm[2] = CURTAIN_OUT;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Update

// UPDATE EVERYTHING
scr_updateAll(id);

// increment month
var lastSeason = DLL_getGameSeason();
scr_incrementMonth(id);

// if season change:
var curSeason = DLL_getGameSeason();
if (curSeason != lastSeason) {
    alarm[1] = CURTAIN_IN;
    targetCurtainAlpha = 1;
    drawCurtain = true;
}
else // update season
    gameSeason = DLL_getGameSeason();

    
// Update Population:
scr_updatePopulation(id);    


// ZONE DEVELOPMENT (rotates types):
DLL_growZone(updateZone);
scr_updateZoneBuildings(id, updateZone);
updateZone = scr_updateAlarmZoneType(updateZone);
    

// Consume Electricity
DLL_consumeElectricityAll();



alarm[0] = TIME_MONTH*gameSpeedMultiplier;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Keys for build menu:
if (gameMode == MD_SELECT)
    scr_buildMenuKeys(id);

// keys for game menu:
if (gameMode == MD_MENU)
    scr_gameMenuKeys(id);
    
// keys for map menu:
if (gameMode == MD_MAPS)
    scr_selectMapKeys(id);
    
if (gameMode == MD_TAX)
    scr_taxScreenKeys(id);
    
/// PRESS AND HOLD building placement
//scr_placementHold(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surfaceMiniMap)) {
    surface_free(surfaceMiniMap);
}

DLL_mapEnd();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);

if (canDraw) {
    scr_drawScreenTiles(tileString, tileStringSize, id);
    scr_drawRoads(roadElements, id);
    scr_drawScreenBuildings(buildingElements, id, DRAW_BUILDINGS);
    scr_drawZones(id); // Tried surfaces...did NOT work well because of updating
    scr_drawScreenBuildings(buildingElements, id, DRAW_POWER); // draw power signs
    
    if (toggleMiniMap){ // 'M' key to toggle
        scr_drawMiniMap(id);
        
        if (curSpecialMap != MENU_MAP_OVERVIEW)
            scr_drawSpecialMap(id);
    }
    else {
        if (toggleDrawMenus)
            scr_drawMiniMapHelp();
    }
        
    // Menus:
    if (toggleDrawMenus) {
        scr_drawMenus();
        
        // title:
        scr_drawTitle();
            
        // Season and year:
        scr_drawTime(gameTimeString);
        
        // bar behind money and population:
        scr_drawPopMoneyBar();
        
        // money:
        scr_drawMoney(id);
        
        // population:
        scr_drawPopulation(id);
        
        // Draw electricity bar:
        scr_drawPowerBar();
        
        // speed icons:
        scr_drawSpeedIcons();
        
        // build menu help
        if (gameMode == MD_NORMAL)
            scr_drawBuildMenuHelp();
    }
    else
        scr_drawMenuHelp();
    
        
    // draw Notification (message) box:
    scr_drawMessageBox(id);
        
        
    // Game Paused:
    scr_drawPause(id, drawPause);
    
    
    
    
    
    
    // ---------------------- MODES ------------------
    // Build Menu:
    if (gameMode == MD_SELECT) {
        scr_drawBuildMenu(id);
        scr_drawBuildingInfo(id);
        scr_drawQtoQuit();
    }
        
    // Building PLACEMENT:
    else if (gameMode == MD_PLACE) {
        scr_drawPlacement(id);
        scr_drawBuildingInfo(id);
        scr_drawQtoQuit();
    }
    
    // Game Menu:
    else if (gameMode == MD_MENU) {
        scr_drawMenuSelected(selectedMenu);
        scr_drawQtoQuit();
    }
    
    // Graphs Menu:
    
    // Map Menu:
    else if (gameMode == MD_MAPS) {
        scr_drawMapsScreen(id);
        scr_drawMapSelected(selectedMap);
        scr_drawMapDescription(id);
    }
    
    // File Menu:
    
    
    
    
    // season change:
    if (drawCurtain) {
        scr_updateCurtainAlpha(id);
        scr_drawCurtain(currentCurtainAlpha);
    }
} // end if canDraw


// Tax Menu:
if (gameMode == MD_TAX) {
    scr_drawTaxScreen(id);
}



// DEBUG:
//if (pressHoldMode) {
//    draw_text(view_xview + view_wview/2, view_yview + view_hview/2, "PLACEMENT MODE");
//}



// update:
if (updateSurfaces) {
    scr_setSurfaceMiniMap(tileString, tileStringSize, id);
    
    if (curSpecialMap == MENU_MAP_POLLUTION)
        scr_setSurfacePollution(id);
    else if (curSpecialMap == MENU_MAP_LANDVALUE)
        scr_setSurfaceLandValue(id);
    
    scr_updateAll(id)
    updateSurfaces = false;
}


// game end message:
if (gameEndMessage) 
    scr_drawQuitGameMessage(id);


if (drawMessageScreen) {
    scr_drawMessageScreen(messageQueue);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="105">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG: COLLECT TAXES

var moneyRes = DLL_collectTax(Z_RES);
var moneyCom = DLL_collectTax(Z_COM);
var moneyInd = DLL_collectTax(Z_IND);



show_message("[TAXES COLLECTED]#RES: " + string(moneyRes) + "#COM: " + string(moneyCom) + "#IND: " + string(moneyInd));

money = DLL_getGameMoney();
scr_updateMoneyString(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="104">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG: SHOW TAX SCREEN

// update game mode:
gameMode = DLL_getGameMode();




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="98">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_pushMessage(messageQueue, "5XXX 10XX 15XX 20XX 25XX 30XX 35XX 40XX 45XX 50XX 55XX 60XX 65XX 70XX 75XX 80XX 85XX 90XX 95XX 100X 105X 110X 115X 120X 125X 130X ", c_red, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="97">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG


show_message("season: " + string(gameSeason));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="96">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG
scr_updateAll(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_removeBuilding();

scr_updateAll(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// game end screen?
if (gameEndMessage == true)
    game_end();

if (gameMode != MD_NORMAL) {
    DLL_setGameMode(MD_NORMAL);
    gameMode = DLL_getGameMode();
    camera.camera_toggle = MD_NORMAL;
    scr_updateAll(id);
    canDraw = true;
    drawTax = false;
    messageQueue.canDraw = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// OPEN the screen
if (!drawMessageScreen) {
    drawMessageScreen = true;
    camera.camera_toggle = MD_MENU;
    DLL_setGameMode(MD_NOTIFICATIONS);
    gameMode = DLL_getGameMode();
}

// CLOSE the screen
else {
    drawMessageScreen = false;
    camera.camera_toggle = MD_NORMAL;
    DLL_setGameMode(MD_NORMAL);

    gameMode = DLL_getGameMode();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (toggleMiniMap)
    toggleMiniMap = false;
else
    toggleMiniMap = true;
    
// always update surface:
updateSurfaces = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get building info from building under the cursor:
var currentX = scr_getX(camera);
var currentY = scr_getY(camera);
scr_getBuildingInfo(currentX, currentY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// TOP MENU OPTIONS

if (gameMode != MD_MENU){
    toggleDrawMenus = true;
    camera.camera_toggle = MD_MENU;
    DLL_setGameMode(MD_MENU);
    gameMode = DLL_getGameMode();
}
else {
    camera.camera_toggle = MD_NORMAL;
    DLL_setGameMode(MD_NORMAL);
    gameMode = DLL_getGameMode();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



// Go to build menu if in normal mode:
if (gameMode == MD_NORMAL) {
    DLL_setGameMode(MD_SELECT);
    camera.camera_toggle = MD_SELECT;
    scr_updateAll(id);
}
    
// Select a building in building select mode:
else if (gameMode == MD_SELECT) {
    DLL_setGameMode(MD_PLACE);
    camera.camera_toggle = MD_PLACE;
    scr_updateAll(id);
}

// Place a building in placement mode:
else if (gameMode == MD_PLACE) {
    scr_placeBuilding(id, selectedBuilding);
    //pressHoldMode = true;
    //camera.slowDown = CAMERA_MOVESLOW;
}

// Enter a menu option when in menu mode:
else if (gameMode == MD_MENU) {
    scr_selectMenuOption(id);
}

// select a map type in menu maps:
else if (gameMode == MD_MAPS) {

    if (mapUnlocked[selectedMap]) {
        DLL_setGameMode(MD_NORMAL);
        camera.camera_toggle = MD_NORMAL;
        curSpecialMap = selectedMap;
        scr_updateAll(id);
    }
    else
        audio_play_sound(sfx_error, 5, false);
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (toggleDrawMenus)
    toggleDrawMenus = false;
else
    toggleDrawMenus = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_FAST);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_NORMAL);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_SLOW);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_PAUSE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (gameEndMessage == false)
    gameEndMessage = true;
else
    gameEndMessage = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (zoomOut == false)
    zoomOut = true;
    
else
    zoomOut = false;
    
    
if (zoomOut) {
    view_wview = VIEW_ZOUT_W;
    view_hview = VIEW_ZOUT_H;
}
else {
    view_wview = VIEW_NORMAL_W;
    view_hview = VIEW_NORMAL_H;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pressHoldMode = false;
alarm[3] = -1;
camera.slowDown = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
