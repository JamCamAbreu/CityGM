<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// GAME MAKER SETUP --------------------------
draw_set_font(ft_normal);
var randomSeed = DLL_getRandomRange(1,100);
random_set_seed(randomSeed);

// DLL SETUP ---------------------------------
DLL_initDLL();
DLL_initMap();


// Map Generation ----------------------------
// Trees:
var treeSeeds = irandom_range(4, 12);
DLL_seedMap(TT_TREE, treeSeeds);
var treeDensity = irandom_range(5, 24) + (24 - treeSeeds*2);
DLL_growSeeds(TT_TREE, treeDensity);

// little ponds:
var waterSeeds = irandom_range(1, 3);
DLL_seedMap(TT_WATER, waterSeeds);
var waterDensity = (30 - waterSeeds*8) + 10;
DLL_growSeeds(TT_WATER, waterDensity);

// Map Information ---------------------------
// TILES:
tileString = DLL_tileTypeToString();
tileStringSize = string_length(tileString);

// BUILDINGS:
buildingString = DLL_buildingsToString();
buildingElements = DLL_getBuildingVectorSize();
xArray[MAX_BUILDINGS] = 0;
yArray[MAX_BUILDINGS] = 0;
typeArray[MAX_BUILDINGS] = 0;

// MINIMAP:
surfaceMiniMap = noone; // init surface
updateSurfaces = true; // draw first time
toggleMiniMap = false;

// Menu and Info:
toggleDrawMenus = true;

// Time and Seasons ---------------
gameYear = DLL_getGameYear();
gameMonth = DLL_getGameMonth();
gameSeason = DLL_getGameSeason();
gameTimeString = scr_setTimeString(gameSeason, gameYear);
gameSpeed = SP_NORMAL;
gameSpeedMultiplier = TIME_MUL_NORMAL;
alarm[0] = TIME_MONTH;
timeAlarmStorage = alarm_get(0);
drawPause = false;

// season change:
drawCurtain = false;
currentCurtainAlpha = 0;
targetCurtainAlpha = 0;


// money
money = DLL_getGameMoney();
moneyWithCommas = "";
moneyPlaceholders = "";
scr_updateMoneyString(id);

global.curtainClosed = false;

// population and city type
gamePopulation = DLL_getPopulation();
gameCityType = DLL_getCityType();
popWithCommas = "";
popPlaceholders = "";
scr_updatePopString(id);


// Modes ---------------
gameMode = DLL_getGameMode();

// Build Mode:
selectedBuilding = BT_TREE; // just a default value...
selectedBuildingString = scr_setBuildingMenuString(selectedBuilding);


// Game Menu ------------------
selectedMenu = MENU_DATA;   // default value



// Other: ---------------------
// camera:
camera = instance_create(view_wview/2,view_hview/2, obj_camera);

// puts instance count in window boarder:
debugger = instance_create(x,y, obj_debugger);

image_speed = 0;
canDraw = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CURTAIN OUT EFFECT FOR SEASON

drawCurtain = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CURTAIN IN EFFECT FOR SEASON

targetCurtainAlpha = 0;

// NOW update the season to draw the correct sprites:
gameSeason = DLL_getGameSeason();

alarm[2] = CURTAIN_OUT;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Update

// UPDATE EVERYTHING
scr_updateAll(id);


// update time (increment month)
var lastSeason = DLL_getGameSeason();
scr_incrementMonth(id);

// if season change:
var curSeason = DLL_getGameSeason();
if (curSeason != lastSeason) {
    alarm[1] = CURTAIN_IN;
    targetCurtainAlpha = 1;
    drawCurtain = true;
}
else // update season
    gameSeason = DLL_getGameSeason();



// debug:
//scr_addPopulation(id, 50);



alarm[0] = TIME_MONTH*gameSpeedMultiplier;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Keys for build menu:
if (gameMode == MD_SELECT)
    scr_buildMenuKeys(id);

// keys for game menu:
if (gameMode == MD_MENU)
    scr_gameMenuKeys(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surfaceMiniMap)) {
    surface_free(surfaceMiniMap);
}

DLL_mapEnd();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canDraw) {
    scr_drawScreenTiles(tileString, tileStringSize, id);
    scr_drawScreenBuildings(buildingElements, id); // pass in arrays?
    
    if (toggleMiniMap) // 'M' key to toggle
        scr_drawMiniMap(id);
    else {
        if (toggleDrawMenus)
            scr_drawMiniMapHelp();
    }
        
    // Menus:
    if (toggleDrawMenus) {
        scr_drawMenus();
        
        // title:
        scr_drawTitle();
            
        // Season and year:
        scr_drawTime(gameTimeString);
        
        // bar behind money and population:
        scr_drawPopMoneyBar();
        
        // money:
        scr_drawMoney(id);
        
        // population:
        scr_drawPopulation(id);
        
        // speed icons:
        scr_drawSpeedIcons();
        
        // build menu help
        if (gameMode == MD_NORMAL)
            scr_drawBuildMenuHelp();
    }
    else
        scr_drawMenuHelp();
    
    // Game Paused:
    scr_drawPause(drawPause);
    
    // Build Menu:
    if (gameMode == MD_SELECT) {
        scr_drawBuildMenu(id);
        scr_drawBuildingInfo(id);
        scr_drawQtoQuit();
    }
        
    // Building PLACEMENT:
    if (gameMode == MD_PLACE) {
        scr_drawPlacement(id);
        scr_drawBuildingInfo(id);
        scr_drawQtoQuit();
    }
    
    // Game Menu:
    if (gameMode == MD_MENU) {
        scr_drawMenuSelected(selectedMenu);
        scr_drawQtoQuit();
    }
    
    // season change:
    if (drawCurtain) {
        scr_updateCurtainAlpha(id);
        scr_drawCurtain(currentCurtainAlpha);
    
    }
    
    
}






// update:
if (updateSurfaces) {
    scr_setSurfaceMiniMap(tileString, tileStringSize, id);
    updateSurfaces = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


// 'E' to turn on build mode

if (gameMode != MD_NORMAL) {
    DLL_setGameMode(MD_NORMAL);
    camera.camera_toggle = MD_NORMAL;
    scr_updateAll(id);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (toggleMiniMap)
    toggleMiniMap = false;
else
    toggleMiniMap = true;
    
// always update surface:
updateSurfaces = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var buildingVectorSize = DLL_getBuildingVectorSize();
show_message("size = " + string(buildingVectorSize));

var buildingsString = DLL_buildingsToString();
show_message("String = " + buildingsString);

*/


//var tileString = DLL_tileTypeToString();
//show_message(tileString);

/*
var number;
var numString = "";
for (i = 0; i &lt; 40; i++) {
    number = DLL_getRandomRange(0,100);
    numString += string(number);
    numString += "  ";
}
show_message("random numbers using DLL function: " + numString);
*/

//DLL_growSeeds(TT_TREE, 1);


//audio_play_sound(sfx_error, 5, false);

var row = scr_buildMenuGetRow(selectedBuilding);
var column = scr_buildMenuGetColumn(selectedBuilding);
show_message("Row: " + string(row) + ", column: " + string(column));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gameMode != MD_MENU){
    toggleDrawMenus = true;
    camera.camera_toggle = MD_MENU;
    DLL_setGameMode(MD_MENU);
    gameMode = DLL_getGameMode();
}
else {
    camera.camera_toggle = MD_NORMAL;
    DLL_setGameMode(MD_NORMAL);
    gameMode = DLL_getGameMode();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var randomBuilding = irandom_range(0, BT_GYM);
//scr_placeBuilding(randomBuilding); // fixme
//scr_updateAll(id);

// Go to build menu if in normal mode:
if (gameMode == MD_NORMAL) {
    DLL_setGameMode(MD_SELECT);
    camera.camera_toggle = MD_SELECT;
    scr_updateAll(id);
}
    
// Select a building in building select mode:
else if (gameMode == MD_SELECT) {
    DLL_setGameMode(MD_PLACE);
    camera.camera_toggle = MD_PLACE;
    scr_updateAll(id);
}

// Place a building in placement mode:
else if (gameMode == MD_PLACE) {
    scr_placeBuilding(id, selectedBuilding);
}

// Enter a menu option when in menu mode:
else if (gameMode == MD_MENU) {
    // SCRIPT HERE
    // debug:
    audio_play_sound(sfx_error, 5, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (toggleDrawMenus)
    toggleDrawMenus = false;
else
    toggleDrawMenus = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_FAST);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_NORMAL);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_SLOW);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_setSpeed(id, SP_PAUSE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_removeBuilding();

scr_updateAll(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
