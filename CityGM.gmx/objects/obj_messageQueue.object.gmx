<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canDraw = true;


messageStrings[MAX_MESSAGES] = "";
messageColors[MAX_MESSAGES] = c_black;
messageLife[MAX_MESSAGES] = 0;

lastMessage = 0;
curMessage = 0;

startNextMessage = false;

// POSITIONS:
PAD = 8;



// start the listener
alarm[0] = MSG_LISTENER_ALARM;


// contains the lines for drawing:
line[MAX_LINE_NUM] = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// kill message

startNextMessage = false;
curMessage++;

alarm[0] = MSG_LISTENER_ALARM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// display message for its given life

alarm[2] = messageLife[curMessage];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LISTENER

if (curMessage &lt; lastMessage) {
    alarm[1] = MESSAGE_SPEED;
    
    // reset lines:
    for (i = 0; i &lt; MAX_LINE_NUM; i++) { line[i] = ""; }
    
    // chop up message:
    var message = messageStrings[curMessage];
    var length = string_length(message);
    var lineNum = 0;
    var snipSpot;
    
    while ((lineNum &lt; MAX_LINE_NUM) &amp;&amp; (length &gt; MAX_CHARS_MSG)) {
    
        // only snip at a space:
        snipSpot = MAX_CHARS_MSG;
        while (string_char_at(message, snipSpot) != ' ') { snipSpot--; }
    
        // take snipSpot characters and store them in each line:
        line[lineNum] = string_copy(message, 1, snipSpot);
        
        // remove from original message:
        message = string_delete(message, 1, snipSpot);
        
        // update length:
        length = string_length(message);
    
        // new line:
        lineNum++;
    }
    
    // add last line:
    if (length &gt; 0) {
        line[lineNum] = message;
    }
    
    
    // start drawing message:
    startNextMessage = true;
}
else 
    alarm[0] = MSG_LISTENER_ALARM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canDraw) {
    if (startNextMessage) {
    
        // draw another thicker message box:
        scr_drawMessageBox();
    
        var color = messageColors[curMessage];
        draw_set_font(ft_notifications);
        
        // draw each line:
        var indent = 0;
        for (i = 0; i &lt; MAX_LINE_NUM; i++) {
            if (i &gt; 0) { indent = 8; }
            // black backdrop
            draw_text_colour(MESSAGE_X1 + indent - 1, MESSAGE_Y1 + MESSAGE_HEIGHT*i - 1, line[i], c_black, c_black, c_black, c_black, 1);
            // line:
            draw_text_colour(MESSAGE_X1 + indent, MESSAGE_Y1 + MESSAGE_HEIGHT*i, line[i], color, color, color, color, 1);
        }
            
            
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
